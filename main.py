
"""
üìÑ Dicom-PDF Main Module
Este m√≥dulo automatiza o processo de extra√ß√£o, convers√£o e gera√ß√£o de relat√≥rios de imagens DICOM a partir de arquivos ZIP. Ele integra-se ao PACS Orthanc para gerenciamento de pacientes, converte imagens DICOM para o formato JPEG e gera relat√≥rios em PDF. Al√©m disso, inclui funcionalidade espec√≠fica para impress√£o no Windows.
üì• Fun√ß√µes Principais:
- `sleep_with_while(seconds)`: Exibe uma contagem regressiva enquanto aguarda o tempo especificado.
- `imprimir_arquivo(path_arquivo, nome_impressora)`: Envia um arquivo para impress√£o em uma impressora espec√≠fica no Windows.
- `Extract_Convert_Img(file)`: Extrai imagens DICOM de um arquivo ZIP, converte-as para JPEG e gera um relat√≥rio em PDF.
- `orthanc()`: Integra-se ao Orthanc PACS para monitorar e processar novos pacientes.
- Este m√≥dulo utiliza par√¢metros internos e fun√ß√µes auxiliares para realizar suas opera√ß√µes. Consulte as docstrings individuais para detalhes.
üì§ Retornos:
- O m√≥dulo retorna caminhos de arquivos gerados, como PDFs, e mensagens de status para o usu√°rio.
‚ö†Ô∏è Exce√ß√µes:
- `FileNotFoundError`: Se arquivos especificados n√£o forem encontrados.
- `OSError`: Se ocorrerem erros durante a extra√ß√£o ou convers√£o.
- `Exception`: Para erros gerais, como falhas na integra√ß√£o com Orthanc ou na impress√£o.
"""

import os
import time
from pyorthanc import Orthanc
from DicomManager import Unzipper, DICOM2JPEG
from PDFMAKER import MkPDF
from OCR import process_patient_with_ai, markdown_to_pdf

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")



###############################################################################
#                         WINDOWS-SPECIFIC IMPORTS                            #
#                     (Only available on Windows OS)                          #
###############################################################################

#try:
#    import win32print
#    import win32api
#    WINDOWS_PRINTING_AVAILABLE = True
#except ImportError:
#    # Not on Windows or pywin32 not installed
#    WINDOWS_PRINTING_AVAILABLE = False

###############################################################################
#                                                                             #
#   Dicom-PDF Main Script                                                     #
#                                                                             #
#   This script automates the extraction, conversion, and reporting of DICOM   #
#   images from ZIP archives. It integrates with Orthanc PACS for patient      #
#   management, converts DICOM images to JPEG, and generates PDF reports.      #
#   Windows-specific printing functionality is included for report output.     #
#                                                                             #
#   Author: Anders                                                            #
#   Repository: https://github.com/AndersDeveloper/Dicom-PDF                  #
#                                                                             #
###############################################################################

def sleep_with_while(seconds):
    """
    ### ‚è≥ Timer Function with While Loop
    Function to create a timer that displays the remaining time every second using a `while` loop.
    #### üì• Parameters:
        seconds: int
    ### üïí Returns:
        None

    #### Example:

    ```python
sleep_with_while(10)
    ```
    """
    start_time = time.time()  # Tempo inicial
    while time.time() - start_time < seconds:
        elapsed_time = time.time() - start_time
        remaining_time = seconds - elapsed_time
        print(f"Faltam {int(remaining_time)} segundos...")
        time.sleep(1)  # Aguardar um segundo entre cada itera√ß√£o
    print("Tempo finalizado!")


#def imprimir_arquivo(path_arquivo, nome_impressora="EPSON L3250 Series"):
 #   """
 #   üñ®Ô∏è Fun√ß√£o de Impress√£o de Arquivo
#
 #   Fun√ß√£o para enviar um arquivo para impress√£o em uma impressora espec√≠fica no Windows.
#
 #   üì• Par√¢metros:
 #   :param path_arquivo: üìÑ Caminho do arquivo a ser impresso.
 #   :type path_arquivo: str
 #   :param nome_impressora: üñ®Ô∏è Nome da impressora a ser utilizada. Se None, utiliza a impressora padr√£o.
 #   :type nome_impressora: str, optional
##   License: MIT                                                              #
#
 #   :return: None
#
 #   :raises FileNotFoundError: ‚ùå Se o arquivo especificado n√£o for encontrado.
 #   :raises Exception: ‚ö†Ô∏è Se ocorrer um erro ao enviar o arquivo para a impressora.
#
 #   üßë‚Äçüíª Exemplo:
 #   ```python
#
 #       imprimir_arquivo("relatorio.pdf")
 #       imprimir_arquivo("imagem.jpg", nome_impressora="Minha Impressora")
 #   ```
#
 #   """
 #   if not os.path.exists(path_arquivo):
 #       print(f"Arquivo n√£o encontrado: {path_arquivo}")
 #       return

    # Check if Windows printing is available
    #if not WINDOWS_PRINTING_AVAILABLE:
    #    print(f"‚ö†Ô∏è Impress√£o n√£o dispon√≠vel nesta plataforma. Arquivo: {path_arquivo}")
    #    print("üí° A funcionalidade de impress√£o est√° dispon√≠vel apenas no Windows.")
    #    return

    # Get the default printer if no printer is specified
    #if nome_impressora is None:
    #    nome_impressora = win32print.GetDefaultPrinter()
#
    ## Send the file to the printer
    #try:
    #    win32api.ShellExecute(
    #        0,
    #        "print",
    #        path_arquivo,
    #        f'"{nome_impressora}"',
    #        ".",
    #        0
    #    )
    #    print(
    #        f"Arquivo {path_arquivo} enviado para a impressora {nome_impressora}.")
    #except Exception as e:
    #    print(f"Erro ao imprimir o arquivo: {e}")


def Extract_Convert_Img(file: str):
    """
    üñºÔ∏è Extract_Convert_Img
    Extracts DICOM images from a ZIP file, converts them to JPEG format, and generates a PDF report. This function is part of a medical imaging workflow, facilitating the conversion and compilation of DICOM images for further analysis and reporting.

    ### üñ•Ô∏è Parameters
    - `file` (`str`): The name of the ZIP file containing DICOM images. The file should be located in the current working directory.

    ### üîÑ Returns
    - `str`: The path to the created PDF file. After its generation, an OCR process can be executed to create the corresponding text file.

    ### ‚ö†Ô∏è Raises
    - `FileNotFoundError`: If the specified ZIP file does not exist.
    - `OSError`: If there is an error during the extraction or conversion process.

    ### üí° Example

    >>> Extract_Convert_Img("patient_data.zip")
    'Users/Anders/Patients/PATIENT_NAME/Report/PATIENT_NAME.pdf'
    """
    print(f"üîÑ Processando arquivo: {file}")

    # Extract the file
    unzipper = None
    try:
        unzipper = Unzipper(f"ZIPS/{file}")
        # Unzip the file
        unzipper.unzipper()
        # Get the name of the patient (remove timestamp if present)
        name = unzipper.name
        name = name[15:]
        print(f"üë§ Paciente: {name}")

    except Exception as e:
        print(f"‚ùå Erro na extra√ß√£o: {e}")
        return None
    finally:
        # Garantir que o arquivo ZIP seja fechado
        if unzipper and hasattr(unzipper, 'path'):
            try:
                unzipper.path.close()
            except:
                pass

    # Create patient folders
    base_dir = os.path.join(os.getcwd(), "Users", "Anders", "Patients")
    patient_dir = os.path.join(base_dir, name)
    os.makedirs(patient_dir, exist_ok=True)
    images_dir = os.path.join(patient_dir, "Images")
    reports_dir = os.path.join(patient_dir, "Report")
    dcm_dir = os.path.join(".", "Dicoms")
    os.makedirs(images_dir, exist_ok=True)
    os.makedirs(reports_dir, exist_ok=True)

    # Convert DICOM to JPEG
    try:
        print(f"üñºÔ∏è Convertendo imagens DICOM para JPEG...")
        dicom2jpeg = DICOM2JPEG(dcm_dir, images_dir)
        conversion_success = dicom2jpeg.converter()

        if not conversion_success:
            print(f"‚ö†Ô∏è Nenhuma imagem foi convertida para {name}")

    except Exception as e:
        print(f"‚ùå Erro na convers√£o DICOM‚ÜíJPEG: {e}")

    # Generate the PDF
    try:
        print(f"üìÑ Gerando PDF para {name}...")
        MkPDF(name)
        print(f"‚úÖ PDF gerado com sucesso")
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o do PDF: {e}")

    # Clean up DICOM files
    try:
        dicom2jpeg.eliminate_dcm()
        print(f"üßπ Arquivos DICOM tempor√°rios removidos")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao limpar arquivos DICOM: {e}")

    # Generate AI-powered report if API key is available
    if OPENAI_API_KEY:
        try:
            print(f"ü§ñ Gerando laudo com IA para {name}...")
            process_patient_with_ai(
                patient_name=name,
                api_key=OPENAI_API_KEY,
            )

            # Convert markdown to PDF
            md_path = os.path.join(reports_dir, f"{name}.md")
            pdf_path = os.path.join(reports_dir, f"{name}_laudo.pdf")

            if os.path.exists(md_path):
                markdown_to_pdf(md_path, pdf_path)
                print(f"‚úÖ Laudo IA gerado: {name}_laudo.pdf")
            else:
                print(f"‚ö†Ô∏è Arquivo markdown n√£o encontrado: {md_path}")

        except Exception as e:
            print(f"‚ùå Erro ao gerar laudo com IA: {e}")
    else:
        print("‚ÑπÔ∏è Chave da API OpenAI n√£o configurada. Pulando gera√ß√£o de laudo com IA.")

    final_pdf_path = os.path.join(reports_dir, f"{name}.pdf")
    print(f"‚úÖ Processamento conclu√≠do para {name}")
    return final_pdf_path





# ORTHANC

def orthanc():
    """
    ### üè• Fun√ß√£o Principal do Orthanc PACS

    Conecta ao servidor Orthanc PACS e monitora continuamente por novos pacientes.
    Quando encontra novos pacientes, baixa os arquivos ZIP e processa automaticamente.

    ### üîÑ Fluxo de Trabalho
    1. Conecta ao servidor Orthanc
    2. Compara pacientes locais (ZIPS) com pacientes no servidor
    3. Baixa novos pacientes como arquivos ZIP
    4. Processa cada novo paciente (extra√ß√£o, convers√£o, PDF)
    5. Aguarda intervalo antes de verificar novamente

    ### ‚ö†Ô∏è Raises
    - `ConnectionError`: Se n√£o conseguir conectar ao servidor Orthanc
    - `Exception`: Para outros erros durante o processamento
    """
    print("üè• Iniciando monitoramento do Orthanc PACS...")
    print("üîó Conectando ao servidor: http://ultrassom.ai:8042")

    try:
        orthanc = Orthanc("http://ultrassom.ai:8042", "anders", "andi110386")
        print("‚úÖ Conex√£o estabelecida com sucesso")
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao Orthanc: {e}")
        return

    # Garantir que o diret√≥rio ZIPS existe
    os.makedirs("ZIPS", exist_ok=True)

    consecutive_errors = 0
    max_consecutive_errors = 5

    try:
        while True:
            try:
                # Load pacientes with ZIPS folder
                oldest_patients = [patient[:-4] for patient in os.listdir("ZIPS") if patient.endswith('.zip')]
                print(f"üìÅ Pacientes locais: {len(oldest_patients)}")
                if oldest_patients:
                    print(f"   √öltimos: {oldest_patients[-3:] if len(oldest_patients) >= 3 else oldest_patients}")

                # Update patients from server
                print("üîç Verificando novos pacientes no servidor...")
                latest_patients = orthanc.get_patients()
                new_patients = [p for p in latest_patients if p not in oldest_patients]

                print(f"üè• Pacientes no servidor: {len(latest_patients)}")
                print(f"üÜï Novos pacientes encontrados: {len(new_patients)}")

                if not new_patients:
                    print("‚ÑπÔ∏è Nenhum novo paciente encontrado, Anders.... Procurando")
                    sleep_with_while(10)
                    consecutive_errors = 0  # Reset error counter on success
                else:
                    print(f"üöÄ Processando {len(new_patients)} novos pacientes...")

                    for i, patient in enumerate(new_patients, 1):
                        try:
                            print(f"\nüì• [{i}/{len(new_patients)}] Baixando paciente: {patient}")

                            # Download patient archive
                            response = orthanc.get_patients_id_archive(str(patient))
                            zip_path = f"ZIPS/{patient}.zip"

                            with open(zip_path, "wb") as f:
                                f.write(response)

                            file_size = os.path.getsize(zip_path) / 1024  # KB
                            print(f"‚úÖ Arquivo baixado: {zip_path} ({file_size:.1f} KB)")

                            # Process patient
                            time.sleep(1)  # Small delay to ensure file is fully written
                            result = Extract_Convert_Img(f"{patient}.zip")

                            if result:
                                print(f"‚úÖ Paciente {patient} processado com sucesso")
                            else:
                                print(f"‚ö†Ô∏è Falha no processamento do paciente {patient}")

                        except Exception as e:
                            print(f"‚ùå Erro ao processar paciente {patient}: {e}")
                            continue

                    print(f"\nüéâ Processamento conclu√≠do para {len(new_patients)} pacientes")
                    consecutive_errors = 0  # Reset error counter on success

                # Wait before checking again
                sleep_with_while(10)

            except Exception as e:
                consecutive_errors += 1
                print(f"‚ùå Erro no ciclo de monitoramento (tentativa {consecutive_errors}/{max_consecutive_errors}): {e}")

                if consecutive_errors >= max_consecutive_errors:
                    print(f"üö® Muitos erros consecutivos ({consecutive_errors}). Encerrando monitoramento.")
                    break

                print(f"‚è≥ Aguardando antes de tentar novamente...")
                sleep_with_while(30)  # Wait longer after error

    except KeyboardInterrupt:
        print("\nüõë Monitoramento interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro fatal no monitoramento: {e}")
    finally:
        print("üîö Encerrando monitoramento do Orthanc PACS")

if __name__ == "__main__":
    orthanc()
